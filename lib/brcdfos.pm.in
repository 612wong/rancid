package brcdfos;
##
## @PACKAGE@ @VERSION@
@copyright@
#
#  RANCID - Really Awesome New Cisco confIg Differ
#
#  brcdfos.pm - Brocade Fabric OS rancid procedures

use 5.010;
use strict 'vars';
use warnings;
no warnings 'uninitialized';
require(Exporter);
our @ISA = qw(Exporter);

use rancid @VERSION@;

our $proc;
our $ios;
our $found_version;
our $found_env;
our $found_diag;
our $found_inventory;
our $config_register;			# configuration register value

our %hwbuf;				# defined in ShowContCbus
our %hwmemc;				# defined in ShowContCbus
our %hwmemd;				# defined in ShowContCbus
our %hwucode;				# defined in ShowContCbus
our $supbootdisk;			# skip sup-bootflash if sup-bootdisk
					# worked
our $type;				# device model, from ShowVersion
our %ucode;				# defined in ShowContCbus

our $ssp;				# SSP/SSE info, from ShowVersion
our $sspmem;				# SSP/SSE info, from ShowVersion

our $C0;				# output formatting control
our $E0;
our $H0;
our $I0;
our $DO_SHOW_VLAN;

our $vss_show_module;			 # Use "show module switch" on 6k VSS systems

@ISA = qw(Exporter rancid main);
#XXX @Exporter::EXPORT = qw($VERSION @commandtable %commands @commands);

# load-time initialization
sub import {
    0;
}

# post-open(collection file) initialization
sub init {
    $ios = "IOS";
    $found_version = 0;
    $found_env = 0;
    $found_diag = 0;
    $found_inventory = 0;
    $config_register = undef;		# configuration register value

    $type = undef;			# device model, from ShowVersion

    # add content lines and separators
    ProcessHistory("","","","!RANCID-CONTENT-TYPE: $devtype\n!\n");
    ProcessHistory("COMMENTS","keysort","B0","!\n");

    0;
}

# main loop of input of device output
sub inloop {
    my($INPUT, $OUTPUT) = @_;
    my($cmd, $rval);

TOP: while(<$INPUT>) {
	tr/\015//d;
	if (/[>]\s?exit$/) {
	    $clean_run = 1;
	    last;
	}
	if (/^Error:/) {
	    print STDOUT ("$host brlogin error: $_");
	    print STDERR ("$host brlogin error: $_") if ($debug);
	    $clean_run = 0;
	    last;
	}
	while (/>\s*($cmds_regexp)\s*$/) {
	    $cmd = $1;
	    if (!defined($prompt)) {
		$prompt = ($_ =~ /^([^>]+>)/)[0];
		$prompt =~ s/([][}{)(\\])/\\$1/g;
		print STDERR ("PROMPT MATCH: $prompt\n") if ($debug);
	    }
	    print STDERR ("HIT COMMAND:$_") if ($debug);
	    if (! defined($commands{$cmd})) {
		print STDERR "$host: found unexpected command - \"$cmd\"\n";
		$clean_run = 0;
		last TOP;
	    }
	    if (! defined(&{$commands{$cmd}})) {
		printf(STDERR "$host: undefined function - \"%s\"\n",
		       $commands{$cmd});
		$clean_run = 0;
		last TOP;
	    }
	    $rval = &{$commands{$cmd}}($INPUT, $OUTPUT, $cmd);
	    delete($commands{$cmd});
	    if ($rval == -1) {
		$clean_run = 0;
		last TOP;
	    }
	}
    }
}

# This routine parses "chassisShow".
sub ChassisShow {
    my($INPUT, $OUTPUT, $cmd) = @_;
    my($linecnt) = 0;
    print STDERR "    In ChassisShow: $_" if ($debug);

    while (<$INPUT>) {
	tr/\015//d;
	return if (/^\s*\^$/);
	last if (/^$prompt/);
	next if (/^(\s*|\s*$cmd\s*)$/);
	return(1) if (/Line has invalid autocommand /);
	return(1) if (/(Invalid (input|command) detected|Type help or )/i);
	return(-1) if (/command authorization failed/i);
	# the pager can not be disabled per-session on the PIX
	if (/^(<-+ More -+>)/) {
	    my($len) = length($1);
	    s/^$1\s{$len}//;
	}
	# skip emtpy lines at the beginning
	if (!$linecnt && /^\s*$/) {
	    next;
	}
	$linecnt++;

	if (/^Header Version:/) {
	    ProcessHistory("INVENTORY","","Header Version:","!$_");
	    next;
	}
	if (/^Factory Part Num:/) {
	    ProcessHistory("INVENTORY","","Factory Part #:","!$_");
	    next;
	}
	if (/^Factory Serial Num:/) {
	    ProcessHistory("INVENTORY","","Factory Serial #:","!$_");
	    next;
	}
	if (/^ID:/) {
	    ProcessHistory("INVENTORY","","ID:","!$_");
	    next;
	}
	if (/^Part Num:/) {
	    ProcessHistory("INVENTORY","","Part Num:","!$_");
	    next;
	}
	if (/^Serial Num:/) {
	    ProcessHistory("INVENTORY","","Serial Num:","!$_");
	    next;
	}

	/^(POWER SUPPLY  Unit:|FAN  Unit:|Time Awake:|Time Alive:|Time Awake:|CHASSIS|Update:|Manufacture:)/ && next;

	ProcessHistory("INVENTORY","","","!$_");
    }
    ProcessHistory("INVENTORY","","","!\n");

    return(0);
}

# This routine parses "domainsShow".
sub DomainsShow {
    my($INPUT, $OUTPUT, $cmd) = @_;
    my($linecnt) = 0;
    print STDERR "    In DomainsShow: $_" if ($debug);

    ProcessHistory("DOMAINS","","","!DOMAINS\n");
    ProcessHistory("DOMAINS","","","!-------\n!\n");
    while (<$INPUT>) {
	tr/\015//d;
	return if (/^\s*\^$/);
	last if (/^$prompt/);
	next if (/^(\s*|\s*$cmd\s*)$/);
	return(1) if (/Line has invalid autocommand /);
	return(1) if (/(Invalid (input|command) detected|Type help or )/i);
	return(-1) if (/command authorization failed/i);
	# the pager can not be disabled per-session on the PIX
	if (/^(<-+ More -+>)/) {
	    my($len) = length($1);
	    s/^$1\s{$len}//;
	}
	# skip emtpy lines at the beginning
	if (!$linecnt && /^\s*$/) {
	    next;
	}
	$linecnt++;

	ProcessHistory("DOMAINS","","","!$_");
    }
    ProcessHistory("DOMAINS","","","!\n");

    return(0);
}

# This routine parses "firmwareShow".
sub FirmwareShow {
    my($INPUT, $OUTPUT, $cmd) = @_;
    my($linecnt) = 0;
    print STDERR "    In FirmwareShow: $_" if ($debug);

    ProcessHistory("FIRMWARE","","","!FIRMWARE\n");
    ProcessHistory("FIRMWARE","","","!--------\n!\n");
    while (<$INPUT>) {
	tr/\015//d;
	return if (/^\s*\^$/);
	last if (/^$prompt/);
	next if (/^(\s*|\s*$cmd\s*)$/);
	return(1) if (/Line has invalid autocommand /);
	return(1) if (/(Invalid (input|command) detected|Type help or )/i);
	return(-1) if (/command authorization failed/i);
	# the pager can not be disabled per-session on the PIX
	if (/^(<-+ More -+>)/) {
	    my($len) = length($1);
	    s/^$1\s{$len}//;
	}
	# skip emtpy lines at the beginning
	if (!$linecnt && /^\s*$/) {
	    next;
	}
	$linecnt++;

	if (/^FOS:/) {
	    ProcessHistory("FIRMWARE","","Header Version:","!$_");
	    next;
	}

	/^(Appl|-)/ && next;

	ProcessHistory("FIRMWARE","","","!$_");
    }
    ProcessHistory("FIRMWARE","","","!\n");

    return(0);
}

# This routine parses "fosConfig".
sub FosConfig {
    my($INPUT, $OUTPUT, $cmd) = @_;
    my($linecnt) = 0;
    print STDERR "    In FosConfig: $_" if ($debug);

    while (<$INPUT>) {
	tr/\015//d;
	return if (/^\s*\^$/);
	last if (/^$prompt/);
	next if (/^(\s*|\s*$cmd\s*)$/);
	return(1) if (/Line has invalid autocommand /);
	return(1) if (/(Invalid (input|command) detected|Type help or )/i);
	return(-1) if (/command authorization failed/i);
	# the pager can not be disabled per-session on the PIX
	if (/^(<-+ More -+>)/) {
	    my($len) = length($1);
	    s/^$1\s{$len}//;
	}
	# skip emtpy lines at the beginning
	if (!$linecnt && /^\s*$/) {
	    next;
	}
	$linecnt++;

	ProcessHistory("FOSCONFIG","","","!$_");
    }
    ProcessHistory("FOSCONFIG","","","!\n");

    return(0);
}

# This routine parses "ipAddrShow".
sub IpAddrShow {
    my($INPUT, $OUTPUT, $cmd) = @_;
    my($linecnt) = 0;
    print STDERR "    In IpAddrShow: $_" if ($debug);

    ProcessHistory("IPSHOW","","","!IP ADDRESSING\n");
    ProcessHistory("IPSHOW","","","!-------------\n!\n");
    while (<$INPUT>) {
	tr/\015//d;
	return if (/^\s*\^$/);
	last if (/^$prompt/);
	next if (/^(\s*|\s*$cmd\s*)$/);
	return(1) if (/Line has invalid autocommand /);
	return(1) if (/(Invalid (input|command) detected|Type help or )/i);
	return(-1) if (/command authorization failed/i);
	# the pager can not be disabled per-session on the PIX
	if (/^(<-+ More -+>)/) {
	    my($len) = length($1);
	    s/^$1\s{$len}//;
	}
	# skip emtpy lines at the beginning
	if (!$linecnt && /^\s*$/) {
	    next;
	}
	$linecnt++;

	/^(SWITCH)/ && next;

	ProcessHistory("IPADDRSHOW","","","!$_");
    }
    ProcessHistory("IPADDRSHOW","","","!\n");

    return(0);
}

# This routine parses "licenseShow".
sub LicenseShow {
    my($INPUT, $OUTPUT, $cmd) = @_;
    my($linecnt) = 0;
    print STDERR "    In LicenseShow: $_" if ($debug);

    ProcessHistory("LICENSE","","","!LICENSE KEYS\n");
    ProcessHistory("LICENSE","","","!------------\n!\n");
    while (<$INPUT>) {
	tr/\015//d;
	return if (/^\s*\^$/);
	last if (/^$prompt/);
	next if (/^(\s*|\s*$cmd\s*)$/);
	return(1) if (/Line has invalid autocommand /);
	return(1) if (/(Invalid (input|command) detected|Type help or )/i);
	return(-1) if (/command authorization failed/i);
	# the pager can not be disabled per-session on the PIX
	if (/^(<-+ More -+>)/) {
	    my($len) = length($1);
	    s/^$1\s{$len}//;
	}
	# skip emtpy lines at the beginning
	if (!$linecnt && /^\s*$/) {
	    next;
	}
	$linecnt++;

	ProcessHistory("LICENSE","","","!$_");
    }
    ProcessHistory("LICENSE","","","!\n");

    return(0);
}

# This routine processes a "configShow"
sub ConfigShow {
    my($INPUT, $OUTPUT, $cmd) = @_;
    my($lineauto, $comment, $linecnt) = (0,0,0);
    print STDERR "    In configShow: $_" if ($debug);

    ProcessHistory("CONFIGSHOW","","","!CONFIGURATION\n");
    ProcessHistory("CONFIGSHOW","","","!-------------\n!\n");
    while (<$INPUT>) {
	tr/\015//d;
	last if (/^$prompt/);
	return(1) if (!$linecnt && /^\s+\^\s*$/);
	return(1) if (/Line has invalid autocommand /);
	return(1) if (/(Invalid (input|command) detected|Type help or )/i);
	return(1) if (/\%Error: No such file or directory/);
	return(0) if ($found_end);		# Only do this routine once
	return(-1) if (/command authorization failed/i);
	return(-1) if (/% ?configuration buffer full/i);
	# the pager can not be disabled per-session on the PIX
	if (/^(<-+ More -+>)/) {
	    my($len) = length($1);
	    s/^$1\s{$len}//;
	}
	/^(date =)/ && next;
	/^! no configuration change since last restart/i && next;
	# skip emtpy lines at the beginning
	if (!$linecnt && /^\s*$/) {
	    next;
	}
	$linecnt++;

	# catch anything that wasnt matched above.
	ProcessHistory("","","","$_");
	# end of config.  the ": " game is for the PIX
	#if (/^(: +)?end$/) {
	if (/End : 0/)	{
	    $found_end = 1;
	    return(0);
	}
    }
    return(0);
}

1;
